version: "3.5"

networks:
  # @TODO: Why? Isn't binding ports on the host enough
  root-tier: ## Outside world
    name: root-tier
  front-tier: ## Inside proxy
    name: front-tier
  log-tier: ## Logging
    name: log-tier

volumes:
  nginx_:
  vhost_:
  portainer_data:
  registry_data:

services:
  nginx:
    image: vinzdef/reverse-proxy.nginx
    container_name: $COMPOSE_PROJECT_NAME.nginx
    restart: unless-stopped
    environment:
      LOGSTASH_TAGS: reverse-proxy
    labels:
        com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    ports:
      - "80:80"
    networks:
      - root-tier
      - front-tier
      - log-tier
    volumes:
      - vhost_:/etc/nginx/vhost.d
      - nginx_:/etc/nginx/conf.d

  dockergen:
    image: vinzdef/reverse-proxy.dockergen
    container_name: $COMPOSE_PROJECT_NAME.dockergen
    restart: unless-stopped
    environment:
      LOGSTASH_TAGS: reverse-proxy
    entrypoint: /usr/local/bin/docker-gen -notify-sighup $COMPOSE_PROJECT_NAME.nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    networks:
      - front-tier
      - log-tier
    volumes:
      - vhost_:/etc/nginx/vhost.d
      - nginx_:/etc/nginx/conf.d
      - /var/run/docker.sock:/tmp/docker.sock:ro  

  registry:
    image: registry:2
    container_name: $COMPOSE_PROJECT_NAME.registry
    restart: always
    environment:
      VIRTUAL_PORT: 5000
      VIRTUAL_HOST: registry.${VIRTUAL_HOST}
    volumes:
      - registry_data:/var/lib/registry
    networks:
      front-tier:
        aliases: 
          - registry.${VIRTUAL_HOST}

  portainer:
    image: portainer/portainer
    container_name: $COMPOSE_PROJECT_NAME.portainer
    restart: always
    environment:
      VIRTUAL_PORT: 9000
      VIRTUAL_HOST: portainer.${VIRTUAL_HOST}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data portainer/portainer
    networks:
      front-tier:
        aliases: 
          - portainer.${VIRTUAL_HOST}
